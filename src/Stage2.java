import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;

import net.sf.javaml.classification.Classifier;
import net.sf.javaml.classification.bayes.NaiveBayesClassifier;
import net.sf.javaml.core.Dataset;
import net.sf.javaml.core.Instance;
import net.sf.javaml.tools.data.FileHandler;

/**
 * Stage 2 of the SafeRoad application This stage takes the file
 * "CommonComplaints.txt" generated by Stage1.java and classifies each complaint
 * according to whether or not it is concern for a recall
 * 
 * @author Matthew Paradiso (matt74@vt.edu)
 *
 */
public class Stage2 {

	public static void main(String[] args) throws SQLException, IOException {

		// Build lookup table
		System.out.print("Building lookup table... ");
		LookupTable lt = new LookupTable();
		System.out.print("done\n");

		// set file to print results to
		FileWriter writer = new FileWriter("PredictedRecalls.txt", false);
		PrintWriter printer = new PrintWriter(writer);

		// Load training set
		Dataset data = FileHandler.loadDataset(new File("TrainingSetSmall.txt"), 9, ",");

		// Construct a Naive Bayes Classifier and apply training set
		Classifier nb = new NaiveBayesClassifier(true, true, true);
		nb.buildClassifier(data);

		// load unclassified data for classification
		Dataset dataForClassification = FileHandler.loadDataset(new File("TrainingSetSmallEmpty.txt"), 9, ",");

		// Classify all instances
		for (Instance inst : dataForClassification) {
			Object predictedClassValue = nb.classify(inst);
			// Object realClassValue = inst.classValue();
			if (predictedClassValue.toString().compareTo("R") == 0)
				printer.println((int) inst.value(0) + " " + lt.getStr((int) inst.value(1)) + " "
						+ lt.getStr((int) inst.value(2)) + " " + lt.getStr((int) inst.value(3)) + " " + inst.toString());
		}

		System.out.println("Predicted recalls printed to file \"PredictedRecalls.txt\"");
		printer.close();
	}
}